# SciTE settings for LuaJIT and Terra files

file.patterns.lua=*.lua;*.dasl;*.t
*source.patterns.lua=$(file.patterns.lua);
filter.lua=Lua (lua)|$(file.patterns.lua)|
*filter.lua=$(filter.lua)
lexer.$(file.patterns.lua)=lua
shbang.lua=lua
*language.lua=Lu&a|lua||

word.chars.lua=$(chars.alpha)$(chars.numeric)$(chars.accented)_%
word.characters.$(file.patterns.lua)=$(word.chars.lua)

# editor ---------------------------------------------------------------------

tab.size.$(file.patterns.lua)=3
indent.size.$(file.patterns.lua)=3
statement.indent.$(file.patterns.lua)=5 do else function then
statement.end.$(file.patterns.lua)=5 end
# look up in the source only 5 lines to get current indentation
statement.lookback.$(file.patterns.lua)=5
# simply repeat the indentation of the previous line instead of indenting on some keywords
indent.maintain.$(file.patterns.lua)=1

# calltips 
api.$(file.patterns.lua)=$(SciteDefaultHome)\lua.api
calltip.lua.end.definition=)
calltip.lua.word.characters=.:$(chars.alpha)$(chars.numeric)
calltip.lua.parameters.start=(
calltip.lua.parameters.end=)
calltip.lua.parameters.separators=,

# keywords: Lua 5.1 & 5.2
# language keywords
keywords.$(file.patterns.lua)=and break do else elseif end for function goto \
if in local not or repeat return then until while

# standard library functions
keywords2.$(file.patterns.lua)=_G _ENV getfenv getmetatable ipairs loadlib next pairs pcall \
rawequal setfenv setmetatable xpcall load module select \
assert collectgarbage dofile error gcinfo loadfile loadstring load \
print rawget rawset require tonumber tostring unpack table.unpack \
string.byte string.char string.dump string.find string.len \
string.lower string.rep string.sub string.upper string.format string.gfind string.gsub \
table.concat table.foreach table.foreachi table.getn table.sort table.insert table.remove table.setn \
math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp \
math.floor math.frexp math.ldexp math.log math.log10 math.max math.min math.mod \
math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan \
string.gmatch string.match string.reverse table.maxn \
math.cosh math.fmod math.modf math.sinh math.tanh \
coroutine.create coroutine.resume coroutine.status \
coroutine.wrap coroutine.yield coroutine.running \
io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write \
io.popen \
os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename os.setlocale os.time os.tmpname \
package.loadlib package.seeall package.searchpath \
debug.debug debug.getfenv debug.gethook debug.getinfo debug.getlocal \
debug.getmetatable debug.getregistry debug.getupvalue debug.setfenv \
debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.traceback

# standard variables
keywords3.$(file.patterns.lua)=self nil true false string table math coroutine io os debug \
_VERSION math.pi math.huge io.stdin io.stdout io.stderr package.cpath package.path package.preload package.loaded \
package.loaders package.searchers

# Terra keywords
keywords4.$(file.patterns.lua)=terra quote escape emit struct var defer
# class method field before after over

# Terra standard library
keywords5.$(file.patterns.lua)=macro global constant symbol sizeof newstruct offsetof \
tuple array arrayof unpacktuple unpackstruct \
iif pr pf pfn min max clamp floor ceil round abs snap lerp sqrt \
PI inf nan maxint minint sin cos tan asin acos atan rad deg \
include includepath includecstring linklibrary overload require_h \
inherited retval \
arr map set \
bnot shl shr band bor xor \
add insert push pop sort format traceback yield resume cowrap cocreate concat \
sortedpairs extend update index indexof attr count memoize \
pack unpack lines readfile writefile binsearch autoload \
inc dec isodd iseven isnan noop pass

# keywords6, 7 & 8 are for other libraries

# styles ---------------------------------------------------------------------

# comments
comment.block.lua=--~
comment.block.at.line.start.lua=1

# braces are only matched in operator style
braces.lua.style=10

# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=fore:$(normal)
# Block comment (Lua 5.0)
style.lua.1=fore:$(comment)
# Line comment
style.lua.2=fore:$(comment)
# Doc comment -- Not used in Lua
style.lua.3=fore:$(comment)
# Number
style.lua.4=fore:$(number)
# Keyword
style.lua.5=fore:$(keyword)
# (Double quoted) String
style.lua.6=fore:$(string)
# Character (Single quoted string)
style.lua.7=fore:$(string)
# Literal string
style.lua.8=fore:$(string)
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=fore:$(error)
# Operators
style.lua.10=fore:$(operator)
# Identifier (everything else...)
style.lua.11=fore:$(normal)
# End of line where string is not closed
style.lua.12=fore:$(error),eolfilled
# Other keywords
style.lua.13=fore:$(keyword2)
style.lua.14=fore:$(keyword2)
style.lua.15=fore:$(keyword)
style.lua.16=fore:$(keyword2)
style.lua.17=fore:$(keyword2)
style.lua.18=fore:$(keyword2)
style.lua.19=fore:$(keyword2)
