# Define SciTE settings for C++, C and JavaScript files.

file.patterns.cpp=*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hpp;*.hxx;*.ipp
file.patterns.cplusplus=*.cc;*.cpp;*.cxx
file.patterns.js=*.js
file.patterns.c.like=$(file.patterns.cpp);$(file.patterns.js)

*source.patterns.cpp=$(file.patterns.c.like)

filter.cpp=C/C++ (c cc cpp cxx h hh hxx hpp ipp)|$(file.patterns.cpp)|
filter.js=JavaScript (js es ts)|$(file.patterns.js)|

*filter.cpp=$(filter.cpp)
*filter.javascript=$(filter.js)

lexer.$(file.patterns.cpp)=cpp
lexer.$(file.patterns.js)=cpp

*language.c=&C / C++|c||
*language.javascript=Java&Script|js||

keywordclass.cpp=alignas alignof and and_eq asm audit auto axiom bitand bitor bool break \
case catch char char8_t char16_t char32_t class compl concept \
const consteval constexpr const_cast continue co_await co_return co_yield \
decltype default delete do double dynamic_cast else enum explicit export extern false final float for \
friend goto if import inline int long module mutable namespace new noexcept not not_eq nullptr \
operator or or_eq override private protected public \
register reinterpret_cast requires return \
short signed sizeof static static_assert static_cast struct switch \
template this thread_local throw true try typedef typeid typename union unsigned using \
virtual void volatile wchar_t while xor xor_eq

keywords.$(file.patterns.cpp)=$(keywordclass.cpp)

# keywords2 is for highlighting user defined keywords or function calls or similar
#keywords2.$(file.patterns.cpp)=file

# keywords3 is for doc comment keywords, highlighted in style 17
#CPP doxygen
file.patterns.doxygen.langs=$(file.patterns.cpp);$(file.patterns.java)
keywordclass.doxygen=a addindex addtogroup anchor arg attention \
author b brief bug c class code date def defgroup deprecated dontinclude \
e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example exception \
f$ f[ f] file fn hideinitializer htmlinclude htmlonly \
if image include ingroup internal invariant interface latexonly li line link \
mainpage name namespace nosubgrouping note overload \
p page par param param[in] param[out] \
post pre ref relates remarks return retval \
sa section see showinitializer since skip skipline struct subsection \
test throw throws todo typedef union until \
var verbatim verbinclude version warning weakgroup $ @ \ & < > # { }
keywords3.$(file.patterns.doxygen.langs)=$(keywordclass.doxygen)

# keywords5 is for preprocessor definitions and will cause inactive code
# to be greyed out. This setting is a space separated list of definitions
# where a definition may be of the form NAME=VALUE or simply NAME.
#keywords5.$(file.patterns.cpp)=_MSC_VER SCI_NAMESPACE GTK_MAJOR_VERSION=2

word.chars.cxx=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.cpp)=$(word.chars.cxx)
calltip.cpp.word.characters=$(chars.alpha)$(chars.numeric)_
comment.block.cpp=//~
#comment.block.at.line.start.cpp=1
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/
comment.box.start.cpp=/*
comment.box.middle.cpp= *
comment.box.end.cpp= */

# Folding
#fold.cpp.syntax.based=0
#fold.comment=0
#fold.cpp.comment.multiline=0
#fold.cpp.comment.explicit=0
#defaults for fold.cpp.explicit.start=//{ and fold.cpp.explicit.end=//}
#  can be replaced by defining custom strings, e.g. //[ and //]
#fold.cpp.explicit.start=//[
#fold.cpp.explicit.end=//]
#if fold strings are set to something like /*{{{ and /*}}} (Origami/WinF style fold strings), enable
#  fold.cpp.explicit.anywhere, allowing explicit fold points being anywhere, not just in line comments
#fold.cpp.explicit.anywhere=1
#fold.preprocessor=1
#fold.compact=1
#fold.at.else=1

statement.indent.$(file.patterns.cpp)=5 case default do else for if private protected public while
statement.end.$(file.patterns.c.like)=10 ;
statement.lookback.$(file.patterns.c.like)=20
block.start.$(file.patterns.c.like)=10 {
block.end.$(file.patterns.c.like)=10 }

#autocomplete.cpp.fillups=(

#styling.within.preprocessor=1
preprocessor.symbol.$(file.patterns.cpp)=#
preprocessor.start.$(file.patterns.cpp)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cpp)=else elif
preprocessor.end.$(file.patterns.cpp)=endif

preprocessor.symbol.$(file.patterns.cs)=#
preprocessor.start.$(file.patterns.cs)=if region
preprocessor.middle.$(file.patterns.cs)=else elif
preprocessor.end.$(file.patterns.cs)=endif endregion

keywordclass.ch=\
auto array bool break case char class complex ComplexInf ComplexNaN \
const continue default delete \
do double else enum export extern float for foreach goto if Inf inline int \
long namespace NaN new NULL private public register restrict return short \
signed sizeof static string_t struct switch this typedef union unsigned \
using void volatile wchar_t while __declspec
keywords.$(file.patterns.ch)=$(keywordclass.ch)
word.chars.ch=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.ch)=$(word.chars.cxx)
comment.block.ch=//~
#comment.block.at.line.start.ch=1
comment.stream.start.ch=/*
comment.stream.end.ch=*/
comment.box.start.ch=/*
comment.box.middle.ch= *
comment.box.end.ch= */
preprocessor.symbol.$(file.patterns.ch)=#
preprocessor.start.$(file.patterns.ch)=if ifdef ifndef
preprocessor.middle.$(file.patterns.ch)=else elif
preprocessor.end.$(file.patterns.ch)=endif

keywordclass.cs=abstract as ascending base bool break by byte case catch char checked \
class const continue decimal default delegate descending do double else enum \
equals event explicit extern false finally fixed float for foreach from goto group if \
implicit in int interface internal into is join lock let long namespace new null \
object on operator orderby out override params private protected public \
readonly ref return sbyte sealed select short sizeof stackalloc static \
string struct switch this throw true try typeof uint ulong \
unchecked unsafe ushort using var virtual void volatile where while
keywords.$(file.patterns.cs)=$(keywordclass.cs)
word.characters.$(file.patterns.cs)=$(word.chars.cxx)

keywordclass.go=\
bool byte break case chan complex64 complex128 const continue defer default  \
else  for func go goto fallthrough false float32 float64 if import int interface int8 int16 int32 int64 \
len map nil package range return select string struct switch true type \
uint uintptr uint8 uint16 uint32 uint64  var
keywords.$(file.patterns.go)=$(keywordclass.go)

keywordclass.rc=\
ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON \
BEGIN BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS \
COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX DISCARDABLE \
EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE LISTBOX LTEXT \
MENU MENUEX MENUITEM MESSAGETABLE POPUP \
PUSHBUTTON RADIOBUTTON RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 \
STRINGTABLE STYLE TEXTINCLUDE VALUE VERSION VERSIONINFO VIRTKEY
keywords.$(file.patterns.rc)=$(keywordclass.rc)

keywordclass.idl=\
aggregatable allocate appobject arrays async async_uuid \
auto_handle \
bindable boolean broadcast byte byte_count \
call_as callback char coclass code comm_status \
const context_handle context_handle_noserialize \
context_handle_serialize control cpp_quote custom \
decode default defaultbind defaultcollelem \
defaultvalue defaultvtable dispinterface displaybind dllname \
double dual \
enable_allocate encode endpoint entry enum error_status_t \
explicit_handle \
fault_status first_is float \
handle_t heap helpcontext helpfile helpstring \
helpstringcontext helpstringdll hidden hyper \
id idempotent ignore iid_as iid_is immediatebind implicit_handle \
import importlib in include in_line int __int64 __int3264 interface \
last_is lcid length_is library licensed local long \
max_is maybe message methods midl_pragma \
midl_user_allocate midl_user_free min_is module ms_union \
ncacn_at_dsp ncacn_dnet_nsp ncacn_http ncacn_ip_tcp \
ncacn_nb_ipx ncacn_nb_nb ncacn_nb_tcp ncacn_np \
ncacn_spx ncacn_vns_spp ncadg_ip_udp ncadg_ipx ncadg_mq \
ncalrpc nocode nonbrowsable noncreatable nonextensible notify \
object odl oleautomation optimize optional out out_of_line \
pipe pointer_default pragma properties propget propput propputref \
ptr public \
range readonly ref represent_as requestedit restricted retval \
shape short signed size_is small source strict_context_handle \
string struct switch switch_is switch_type \
transmit_as typedef \
uidefault union unique unsigned user_marshal usesgetlasterror uuid \
v1_enum vararg version void wchar_t wire_marshal

keywordclass.msidl=handle
keywordclass.xpidl=attribute native noscript scriptable shared wstring inout
keywords.$(file.patterns.idl)=$(keywordclass.idl) $(keywordclass.xpidl)

# http://java.sun.com/docs/books/tutorial/java/nutsandbolts/_keywords.html
keywordclass.java=abstract assert boolean break byte case catch char class \
const continue default do double else enum extends final finally float for \
goto if implements import instanceof int interface long \
native new package private protected public \
return short static strictfp super switch synchronized this throw throws \
transient try var void volatile while
keywords.$(file.patterns.java)=$(keywordclass.java)

keywordclass.javascript=abstract boolean break byte case catch char class \
const continue debugger default delete do double else enum export extends \
final finally float for function goto if implements import in instanceof \
int interface long native new package private protected public \
return short static super switch synchronized this throw throws \
transient try typeof var void volatile while with
keywords.$(file.patterns.js)=$(keywordclass.javascript)

keywordclass.flash=add and break case catch class continue default delete do \
dynamic else eq extends false finally for function ge get gt if implements import in \
instanceof interface intrinsic le lt ne new not null or private public return \
set static super switch this throw true try typeof undefined var void while with

keywordclass2.flash=Array Arguments Accessibility Boolean Button Camera Color \
ContextMenu ContextMenuItem Date Error Function Key LoadVars LocalConnection Math \
Microphone Mouse MovieClip MovieClipLoader NetConnection NetStream Number Object \
PrintJob Selection SharedObject Sound Stage String StyleSheet System TextField \
TextFormat TextSnapshot Video Void XML XMLNode XMLSocket \
_accProps _focusrect _global _highquality _parent _quality _root _soundbuftime \
arguments asfunction call capabilities chr clearInterval duplicateMovieClip \
escape eval fscommand getProperty getTimer getURL getVersion gotoAndPlay gotoAndStop \
ifFrameLoaded Infinity -Infinity int isFinite isNaN length loadMovie loadMovieNum \
loadVariables loadVariablesNum maxscroll mbchr mblength mbord mbsubstring MMExecute \
NaN newline nextFrame nextScene on onClipEvent onUpdate ord parseFloat parseInt play \
prevFrame prevScene print printAsBitmap printAsBitmapNum printNum random removeMovieClip \
scroll set setInterval setProperty startDrag stop stopAllSounds stopDrag substring \
targetPath tellTarget toggleHighQuality trace unescape unloadMovie unLoadMovieNum updateAfterEvent

keywords.$(file.patterns.flash)=$(keywordclass.flash)
keywords2.$(file.patterns.flash)=$(keywordclass2.flash)

keywordclass.vala=if else switch case default break continue return yield for foreach in \
do while try catch finally throw

keywordclass2.vala=namespace interface class struct enum delegate signal errordomain \
construct get set value base const static var dynamic weak unowned virtual abstract \
override public protected private extern throws requires ensures yields out ref lock \
using true false null delete generic new this typeof sizeof as owned int string char bool

keywords.$(file.patterns.vala)=$(keywordclass.vala)
keywords2.$(file.patterns.vala)=$(keywordclass2.vala)

keywordclass.pike=constant enum if do for while else foreach case switch break continue \
return typeof catch class lambda import inherit static void int string float mixed object \
function program array mapping multiset
keywords.$(file.patterns.pike)=$(keywordclass.pike)

keywordclass.swift.declarations=class deinit enum extension func import init \
internal let operator private protocol public static struct subscript typealias var
keywordclass.swift.statements=break case continue default do else fallthrough \
for if in return switch where while
keywordclass.swift.expressions=as dynamicType false is nil self Self super \
true __COLUMN__ __FILE__ __FUNCTION__ __LINE__
# The contextual keywords are only keywords in particular contexts
keywordclass.swift.contextual=associativity convenience dynamic didSet final get \
infix inout lazy left mutating none nonmutating optional override postfix \
precedence prefix Protocol required right set Type unowned weak willSet

keywords.$(file.patterns.swift)=$(keywordclass.swift.declarations) \
$(keywordclass.swift.statements) $(keywordclass.swift.expressions) \
$(keywordclass.swift.contextual)

keywords.$(file.patterns.meson)=if else elif endif
keywords2.$(file.patterns.meson)=import meson project \
executable static_library shared_library dependencies \
include_directories get_option get_compiler get_id compile_resources \
cpp_args link_args override_options name_prefix link_with

# Substyles can be used for extra lists of highlighted identifiers and doc comment keywords
# Identifiers
#substyles.cpp.11=2
#substylewords.11.1.$(file.patterns.cpp)=std map string vector
#style.cpp.11.1=fore:#EE00AA
#style.cpp.75.1=$(style.cpp.75),fore:#BB6666
# Doc comment keywords
#substyles.cpp.17=1
#style.cpp.17.1=$(style.cpp.17),fore:#00AAEE
#style.cpp.81.1=$(style.cpp.81),fore:#6699AA
#substylewords.17.1.$(file.patterns.cpp)=check

# Markers
# keywords6.$(file.patterns.c.like)=FIXME TODO XXX HACK UnresolvedMergeConflict UNDONE

#styling.within.preprocessor=1
#lexer.cpp.allow.dollars=1
#lexer.cpp.track.preprocessor=1
#lexer.cpp.update.preprocessor=1
# For C# leave lexer.cpp.verbatim.strings.allow.escapes as 0 but change to 1 for Objective C
#lexer.cpp.verbatim.strings.allow.escapes=1
#lexer.cpp.triplequoted.strings=1
#lexer.cpp.hashquoted.strings=1
#lexer.cpp.backquoted.strings=1
#lexer.cpp.escape.sequence=1

#lexer.cpp.escape.sequence=1

# C++ styles -----------------------------------------------------------------

# Default
style.cpp.32=fore:$(normal)
# White space
style.cpp.0=fore:$(normal)
# Comment: /* */.
style.cpp.1=fore:$(comment)
# Line Comment: //.
style.cpp.2=fore:$(comment)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=fore:$(comment)
# Number
style.cpp.4=fore:$(number)
# Keyword
style.cpp.5=fore:$(keyword)
# Double quoted string
style.cpp.6=fore:$(string)
# Single quoted string
style.cpp.7=fore:$(string)
# UUIDs (only in IDL)
style.cpp.8=fore:#804080
# Preprocessor
style.cpp.9=fore:$(comment)
# Operators
style.cpp.10=fore:$(operator)
# Identifiers
style.cpp.11=fore:$(normal)
# End of line where string is not closed
style.cpp.12=fore:$(error),eolfilled
# Regular expressions for JavaScript
style.cpp.14=fore:$(string),eolfilled
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=fore:$(comment)
# Keywords2
style.cpp.16=fore:$(keyword2)
# Comment keyword
style.cpp.17=fore:$(comment)
# Comment keyword error
style.cpp.18=fore:$(error)
# Global class
style.cpp.19=fore:$(normal)
# Raw strings for C++0x
style.cpp.20=fore:$(string),eolfilled
# Preprocessor stream comment
style.cpp.23=fore:$(comment)
# Preprocessor stream doc comment
style.cpp.24=fore:$(comment)
# User defined literals
style.cpp.25=fore:$(keyword)
# Task Marker
style.cpp.26=fore:$(comment)
# Escape sequence
style.cpp.27=fore:$(string)

# Inactive states are 64 greater than their active counterparts

# White space
style.cpp.64=fore:$(normal)
# Comment: /* */.
style.cpp.65=fore:$(comment)
# Line Comment: //.
style.cpp.66=fore:$(comment)
# Doc comment: block comments beginning with /** or /*!
style.cpp.67=fore:$(comment)
# Number
style.cpp.68=fore:$(number)
# Keyword
style.cpp.69=fore:$(keyword)
# Double quoted string
style.cpp.70=fore:$(string)
# Single quoted string
style.cpp.71=fore:$(string)
# Preprocessor
style.cpp.73=fore:$(comment)
# Operators
style.cpp.74=fore:$(operaetor)
# Identifiers
style.cpp.75=fore:$(normal)
# End of line where string is not closed
style.cpp.76=fore:$(error),eolfilled
# Regular expressions for JavaScript
style.cpp.78=fore:$(string),eolfilled
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.79=fore:$(comment)
# Keywords2
style.cpp.80=fore:$(keyword2)
# Comment keyword
style.cpp.81=fore:$(comment)
# Comment keyword error
style.cpp.82=fore:$(error)

# TODO:

# Raw strings for C++0x
style.cpp.84=$(style.cpp.20),fore:#B090B0,$(traits.inactive)
# Triple-quoted strings for Vala
style.cpp.85=$(style.cpp.21),fore:#90B090,$(traits.inactive)
# Hash-quoted strings for Pike
style.cpp.86=$(style.cpp.22),fore:#90B090,$(traits.inactive)
# Preprocessor stream comment
style.cpp.87=$(style.cpp.23),fore:#A0C090,$(traits.inactive)
# Preprocessor stream doc comment
style.cpp.88=$(style.cpp.23),fore:#C0C0C0,$(traits.inactive)
# User defined literals
style.cpp.89=fore:#D7A090,$(traits.inactive)
# Task Marker
style.cpp.90=fore:#C3A1CF,$(font.code.comment.line),$(traits.inactive)

# Braces are only matched in operator style
braces.cpp.style=10

